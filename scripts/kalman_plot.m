function [kx,ky,ko,kv,kov,x,y,o,vel,tvel,t,dt] = kalman_plot(filename)
  % parse data generated by gts to evaluate kalman performance

  dat = load(filename);

  % kalman state
  t   = dat(:,1); % timestamp [ms ]
  kx  = dat(:,2); % x         [pix]
  ky  = dat(:,3); % y         [pix]
  ko  = dat(:,4); % angle     [rad]
  kv  = dat(:,5); % vel       [pix/ms]
  kov = dat(:,6); % ang vel   [rad/ms]
  kerr= dat(:,7); % kalman error factor

  % klt values
  x   = dat(:,8);
  y   = dat(:,9);
  o   = dat(:,10);

  % calculate vel
  vel = [x(2:end) y(2:end)] - [x(1:end-1) y(1:end-1)];
  dt  = t(2:end)-t(1:end-1);
  vel = sqrt(vel(:,1).^2 + vel(:,1).^2)./dt;
  tvel= t(2:end);

  %% plots
  figure;
  subplot(3,1,1)
  % vel
  hold on; grid on;
  plot(tvel, vel);
  plot(t,kv,'g');
  axis tight;
  hold off;
  title('velocity');
  xlabel('t(ms)');
  ylabel('px/ms');
  legend('vel', 'kvel');

  % position
  subplot(3,1,2)
  hold on; grid on;
  normX = x - min(x); normX = normX / max(normX);
  normY = y - min(y); normY = normY / max(normY);
  normKX = kx - min(kx); normKX = normKX / max(normKX);
  normKY = ky - min(ky); normKY = normKY / max(normKY);
  plot(t,normX,'*k', 'markersize', 3);
  plot(t,normKX,'b');
  plot(t,normY,'*r', 'markersize', 3);
  plot(t,normKY,'g');
  axis tight;
  hold off;
  ylabel('position (normalized)');
  xlabel('t(ms)');
  legend('x', 'kx','y','ky');

  % kalman err
  subplot(3,1,3)
  plot(t,kerr,'r');
  grid on;
  axis tight;
  ylabel('error');
  legend('kerr');

endfunction
